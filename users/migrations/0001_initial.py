# Generated by Django 4.0 on 2021-12-15 09:49

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.TextField(error_messages={'unique': 'このユーザー名は既に使用されています。'}, help_text='32文字以下の英数字、@/./+/-/_のみ使用できます。', max_length=32, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='ユーザ名')),
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(blank=True, error_messages={'unique': 'このメールアドレスは既に使用されています。'}, max_length=254, unique=True, verbose_name='Eメールアドレス')),
                ('is_staff', models.BooleanField(default=False, help_text='これを選択すると、スタッフとして管理権限が付与されます。', verbose_name='権限ステータス')),
                ('is_active', models.BooleanField(default=True, help_text='このユーザをアクティブユーザとして扱うかどうかを指定します。アカウントを削除する際に、代わりにこの選択を解除します。', verbose_name='アクティブユーザ')),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='登録日')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
